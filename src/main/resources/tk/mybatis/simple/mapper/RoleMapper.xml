<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.RoleMapper">

	<!-- 
		开启当前Mapper.xml对应命名空间的二级缓存： 
		flushInterval:
			默认情况不设置，即没有刷新间隔， 缓存仅仅在调用create|update|delete语句时刷新。
		readOnly:
			只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改， 这提供了很重要的性能优势；
			可读写的缓存会通过序列化返回缓存对象的拷贝， 这种方式会慢一些，但是安全， 因此默认是false。
			配置为false：配置的结果是可读写的缓存，而MyBatis使用SerializedCache(org.apache.ibatiS.cache.decorators.SerializedCache)序列化缓存来实现可读写缓存类，
			并通过序列化和反序列化来保证通过缓存获取数据时，得到的是一个新的实例。
			配置为true：配置为只读缓存， MyBatis就会使用Map来存储缓存值，这种情况下，从缓存中获取的对象就是同一个实例。
			
		
	-->
	<!-- <cache 
		eviction="FIFO"
		flushInterval="60000"
		size="512"
		readOnly="false"
	/> -->
	<!-- 也配置参照二级缓存：Mapper.xml就会引用Mapper.java接口中配置的二级缓存，同样可以避免同时配置二级缓存导致的冲突。 -->
	<!-- <cache-ref namespace="tk.mybatis.simple.mapper.RoleMapper"/> -->
	
	<!-- 
		ehcache二级缓存：
		MyBatis 默认提供的缓存实现是基于Map 实现的内存缓存，己经可以满足基本的应用。但是当需要缓存大量的数据时，不能仅仅通过
		提高内存来使用MyBatis的二级缓存，还可以选择一些类似EhCache的缓存框架或Redis缓存数据库等工具来保存MyBatis的二级缓存数据。
		
		作为MyBatis的二级缓存，此时cache的其他属性都不会起到任何作用。
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
	-->
	
	<!-- 
		redis二级缓存：
	<cache type="org.mybatis.caches.redis.RedisCache"/>
	-->

	<resultMap id="roleMap" type="tk.mybatis.simple.model.SysRole">
		<id property="id" column ="id"/>
		<result property="roleName" column= "role_name"/>
		<result property="enabled" column ="enabled"/>
		<result property="createBy" column="create_by"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<resultMap id="rolePrivilegeListMap" type="tk.mybatis.simple.model.SysRole" extends="roleMap">
		<collection property="privilegeList" columnPrefix="privilege_" resultMap="tk.mybatis.simple.mapper.PrivilegeMapper.privilegeMap"/>
	</resultMap>
	
	<resultMap id="rolePrivilegeListMapSelect" type="tk.mybatis.simple.model.SysRole" extends="roleMap">
		<collection property="privilegeList" 
					column="{roleId=id}" 
					fetchType="lazy"
					select="tk.mybatis.simple.mapper.PrivilegeMapper.selectByRoleId"/>
	</resultMap>
	
	<!-- discriminator标签的作用，根据column对应的value判断使用哪个resultMap -->
	<resultMap id="rolePrivilegeListMapChoose" type="tk.mybatis.simple.model.SysRole">
		<discriminator column="enabled" javaType="int">
			<case value="1" resultMap="rolePrivilegeListMapSelect"/>
			<case value="0" resultMap="roleMap"/>
		</discriminator>
	</resultMap>
	
	<!-- enabled使用了枚举类型 -->
	<resultMap id="roleUseEnumMap" type="tk.mybatis.simple.model.SysRoleUseEnum">
		<id property="id" column ="id"/>
		<result property="roleName" column= "role_name"/>
		<!-- <result property="enabled" column ="enabled" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/> -->
		<result property="enabled" column ="enabled" typeHandler="tk.mybatis.simple.type.EnabledTypeHandler"/>
		<result property="createBy" column="create_by"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<select id="selectAllCopy2" resultType="SysRole">
		select * from sys_role
	</select>

	<update id="updateEnabledById">
		update sys_role
		<set>
			<if test="enabled != null">
				enabled = #{enabled},
			</if>
		</set>
		where id = #{id}
	</update>
	
	<update id="updateById">
		update sys_role
		<set>
			<if test="roleName != null">
				role_name = #{roleName, jdbcType=VARCHAR},
			</if>
			<if test="enabled != null">
				enabled = #{enabled},
			</if>
			<if test="createBy != null">
				create_by = #{createBy},
			</if>
			<if test="createTime != null">
				create_time = #{createTime},
			</if>
		</set>
		where id = #{id}
	</update>
	
	<select id="selectRoleById" resultMap="roleMap">
		select * from sys_role where id = #{id}
	</select>
	
	<select id="selectAllRoleAndPrivilegeList" resultMap="rolePrivilegeListMap">
		select 
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time,
			p.id privilege_id,
			p.privilege_name privilege_privilege_name,
			p.privilege_url privilege_privilege_url
		from sys_role r
		inner join sys_role_privilege rp on r.id = rp.role_id
		inner join sys_privilege p on p.id = rp.privilege_id
	</select>
	
	<select id="selectRoleByUserId" resultMap="rolePrivilegeListMapSelect">
		select 
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_role r
		inner join sys_user_role rp on r.id = rp.role_id
		where
			rp.user_id = #{userId}
	</select>

	<select id="selectRoleByUserIdChoose" resultMap="rolePrivilegeListMapChoose">
		select 
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_role r
		inner join sys_user_role rp on r.id = rp.role_id
		where
			rp.user_id = #{userId}
	</select>
	
	<select id="selectRoleByIdUseEnum" resultMap="roleUseEnumMap">
		select * from sys_role where id = #{id}
	</select>
	
	<update id="updateByIdUseEnum">
		update sys_role
		<set>
			<if test="enabled != null">
				<!-- enabled = #{enabled, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}, -->
				enabled = #{enabled, typeHandler=tk.mybatis.simple.type.EnabledTypeHandler},
			</if>
		</set>
		where id = #{id}
	</update>
		
</mapper>