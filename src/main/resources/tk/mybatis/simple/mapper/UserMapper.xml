<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
	
	<!-- MyBatis二级缓存开启
	<cache 
		eviction="LRU"
		flushInterval="60000"
		size="512"
		readOnly="true"
	/> -->
	
	<!-- 
		ehcache作为MyBatis二级缓存 
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
	-->
	
	<!-- redis作为MyBatis二级缓存 -->
	<cache type="org.mybatis.caches.redis.RedisCache"/>
	
	<resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
		<id property="id" column ="id"/>
		<result property="userName" column= "user_name"/>
		<result property="userPassword" column ="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<!-- 查询出User对象中关联的Role对象，只针对selectUserAndRoleById2方法 -->
	<resultMap id="userRoleMap" type="SysUser" extends="userMap">
		<result property="role.id" column="role_id"/>
		<result property="role.roleName" column="role_name"/>
		<result property="role.enabled" column="enabled"/>
		<result property="role.createBy" column="create_by"/>
		<result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<!-- 查询出User对象中关联的Role对象，只针对selectUserAndRoleById3方法 -->
	<resultMap id="userRoleMap2" type="SysUser" extends="userMap">
		<association property="role" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">
			<id property="id" column="id"/>
			<result property="roleName" column="role_name"/>
			<result property="enabled" column="enabled"/>
			<result property="createBy" column="create_by"/>
			<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		</association>
	</resultMap>
	
	<!-- 查询出User对象中关联的Role对象，只针对selectUserAndRoleById3方法 -->
	<resultMap id="userRoleMap3" type="SysUser" extends="userMap">
		<association property="role" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
	</resultMap>
	
	<!-- 
		先查询user，再通过user中查询出来的role_id查询role，这种方式与根据业务逻辑于动执行多次SQL的方式相像，最后会将结果组合成一个对象；至用于selectUserAndRoleByIdSelect方法
		fetchType：lazy，懒加载role，只有在调用getRole()时才去数据库中加载role。
	-->
	<resultMap id="userRoleMapSelect" extends="userMap" type="SysUser">
		<association property="role" column="{id=role_id}" 
					 select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById" fetchType="lazy"/>
	</resultMap>
	
	<!-- user和role之间的关系是一对多，进行的resultMap的配置 -->
	<resultMap id="userRoleListMap" extends="userMap" type="SysUser">
		<collection property="roleList" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">
			<id property="id" column ="id"/>
			<result property="roleName" column= "role_name"/>
			<result property="enabled" column ="enabled"/>
			<result property="createBy" column="create_by"/>
			<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		</collection>
	</resultMap>
	
	<!-- 上一个resultMap配置的简化版 -->
	<resultMap id="userRoleListMap2" extends="userMap" type="SysUser">
		<collection property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
	</resultMap>
	
	<!-- 一次性查询出user、role、privilege数据，user和role的关系是一对多，role和privilege的关系是一对多；当前resultMap针对selectAllUserAndRoleListAndPrivilegeList方法 -->
	<resultMap id="userRoleListPrivilegeListMap" extends="userMap" type="SysUser">
		<collection property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
	</resultMap>
	
	<!-- 查询user和role，且role通过执行额外的sql进行懒加载，使用的是tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId方法-->
	<resultMap id="userRoleListSelectMap" extends="userMap" type="SysUser">
		<collection property="roleList" 
					fetchType="lazy" 
					column="{userId=id}"
					select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"/>
	</resultMap>
	

	<select id="selectById" parameterType="Long" resultMap="userMap" >
		select * from sys_user where id = #{id}
	</select>
	
	<!-- 在sql语句中为列设置别名映射到对象的属性上；这个sql语句可以使用resultType设置返回结果的类型 -->
	<select id="selectAll" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
	</select>
	
	<!-- 设置返回类型直接使用resultType，sql语句中给每个列设置别名，这个别名和java对象的字段一样 -->
	<select id="selectRolesByUserId" resultType="SysRole" parameterType="Long">
		select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on ur.role_id = r.id
		where
			u.id = #{userId}
	</select>
	
	<select id="selectRolesWithUserInfoByUserId1" resultType="SysRoleExtend" parameterType="Long">
		select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime,
			u.user_name userName
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on ur.role_id = r.id
		where
			u.id = #{userId}
	</select>
	
	<select id="selectRolesWithUserInfoByUserId2" resultType="SysRole" parameterType="Long">
		select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime,
			u.user_name "user.userName",
			u.user_email "user.userEmail"
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on ur.role_id = r.id
		where
			u.id = #{userId}
	</select>
	
	<!-- 
		属性说明：
		parameterType：参数的完全限定名称或别名；这个属性可选，因为MyBatis可以推断出传入语句的具体参数，因此改参数可以不配。
		flushCache：默认true，只要这个sql语句被调用，都会清空一级、二级缓存。
		tiemout:设置在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。
		statementType：取值如下，
				STATEMENT：使用Statement，直接操作sql，不进行预编译获取数据
				PREPARED(默认)：使用PreparedStatement，预处理，参数，进行预编译，获取数据
				CALLABLE：执行存储过程CallableStatement
		useGeneratedKeys：(仅insert)默认为false。若设置为true，MyBatis会使用JDBC的getGeneratedKeys方法取出有数据库内部生成的主键，若数据库表中主键不是自增，此属性不要设置。
		keyProperty：(仅insert和update)此属性的作用是将主键写入到配置好得keyProperty中，通常是POJO类的id。如果需要设置联合主键，可以在多个值之间用逗号隔开。
		keyColumn：(仅insert和update)此属性用于设置第几列是主键，当主键不是表中的第一列时需要设置，在需要联合主键时，值可以用逗号隔开。
		dataBaseId：若配置了databaseIdProvider，MyBatis会加载所有的不带databaseId的或匹配当前的dataBaseId的语句。若同时存在带databaseId和不带databaseId的语句，忽略后者
		
	 -->
	<insert id="insert" parameterType="SysRole" flushCache="true" timeout="10">
		insert into 
			sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
		values
			(#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>
	
	<!-- 提供主键自增的数据库(Mysql，SqlServer)，可以通过useGeneratedKeys、keyProperty、keyColumn可以获取主键自增的值 -->
	<insert id="insert2" parameterType="SysRole" flushCache="true" timeout="10" useGeneratedKeys="true" keyProperty="id">
		insert into 
			sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
		values
			(#{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>
	
	<!-- 提供主键自增的数据库(Mysql，SqlServer)，也可以通过selectKey标签获取主键自增的值 -->
	<insert id="insert3" parameterType="SysRole" flushCache="true" timeout="10" useGeneratedKeys="true" keyProperty="id">
		insert into 
			sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
		values
			(#{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
		<!-- selectKey标签中的keyProperty，keyColumn和insert标签中的keyProperty，keyColumn作用一样；
		order属性设置的值是AFTER(这里的AFTER是和insert语句的执行时机来做的对比)，因为当前记录的主键值在insert语句执行成功后才能获取到 -->
		<selectKey resultType="Long" keyProperty="id" keyColumn="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 不提供主键自增的数据库(Oracle)，selectKey标签中的keyProperty，keyColumn和insert标签中的keyProperty，keyColumn作用一样；
		order属性设置的值是BEFORE(这里的BEFORE是和insert语句的执行时机来做的对比)，因为Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中-->
	<insert id="insert4" parameterType="SysRole" flushCache="true" timeout="10" useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="Long" keyProperty="id" keyColumn="id" order="BEFORE">
			SELECT SEQ_ID.nextval from dual
		</selectKey>
		insert into 
			sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
		values
			(#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>
	
	<update id="updateById" parameterType="SysRole">
		update sys_user
		set user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg, jdbcType=BLOB},
			create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>

	<delete id="deleteById">
		delete from sys_user
		where id = #{id}
	</delete>		
		
	<select id="selectRolesByUserIdAndRoleEnabled" resultType="SysRole" >
		select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on r.id = ur.role_id
		where 
			u.id = #{userId} and r.enabled = #{enabled}
	</select>
	
	<select id="selectRolesByUserAndRole" resultType="SysRole" >
		select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on r.id = ur.role_id
		where 
			u.id = #{user.id} and r.enabled = #{role.enabled}
	</select>
	
	<select id="selectByUser" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<where>
			1=1
			<if test = "userName != null and userName != '' ">
				and user_name like concat('%', #{userName}, '%')
			</if>
			<if test = "userEmail != null and userEmail != '' ">
				and user_email = #{userEmail}
			</if>
		</where>
	</select>
	
	<update id = "updateByIdSelective" parameterType="SysUser">
		update sys_user
		<set>
			<if test=" userName != null and userName !='' ">
				user_name = #{userName},
			</if>
			<if test = "userPassword != null and userPassword !='' ">
				user_password = #{userPassword} ,
			</if>
			<if test = "userEmail != null and userEmail != '' ">
				user_email = #{userEmail},
			</if>
			<if test = "userInfo != null and userlnfo != '' ">
				user_info= #{userInfo},
			</if>
			<if test = " headImg != null ">
				head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test = " createTime != null">
				create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id}
		</set>
		where id = #{id}
	</update>
	
	<insert id="insertWithIf" parameterType="SysUser" useGeneratedKeys="true" keyProperty="id">
		insert into 
			sys_user(user_name, user_password, 
			<if test = "userEmail != null and userEmail != '' ">
				user_email, 
			</if>
			user_info, head_img, create_time)
		values
			(#{userName}, #{userPassword}, 
			<if test = "userEmail != null and userEmail != '' ">
				#{userEmail}, 
			</if>
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>
	
	<select id="selectByIdOrUserName" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<where>
			<choose>
				<when test = "id != null">
					and id = #{id}
				</when>
				<when test = "userName != null">
					and user_name = #{userName}
				</when>
				<otherwise>
					and 1 = 2
				</otherwise>
			</choose>
		</where>
	</select>
	
	<select id="selectByUser2" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<where>
			<if test = "userName != null and userName != '' ">
				and user_name like concat('%', #{userName}, '%')
			</if>
			<if test = "userEmail != null and userEmail != '' ">
				and user_email = #{userEmail}
			</if>
		</where>
	</select>
	
	<select id="selectWithTrim" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<trim prefix="where" prefixOverrides="and |or ">
			<if test = "userName != null and userName != '' ">
				and user_name like concat('%', #{userName}, '%')
			</if>
			<if test = "userEmail != null and userEmail != '' ">
				and user_email = #{userEmail}
			</if>
		</trim>
	</select>
	
	<update id = "updateWithTrim" parameterType="SysUser">
		update sys_user
		<trim prefix="set" suffixOverrides=",">
			<if test=" userName != null and userName !='' ">
				user_name = #{userName},
			</if>
			<if test = "userPassword != null and userPassword !='' ">
				user_password = #{userPassword} ,
			</if>
			<if test = "userEmail != null and userEmail != '' ">
				user_email = #{userEmail},
			</if>
			<if test = "userInfo != null and userlnfo != '' ">
				user_info= #{userInfo},
			</if>
			<if test = " headImg != null ">
				head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test = " createTime != null">
				create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id}
		</trim>
		where id = #{id}
	</update>
	
	<select id="selectByIdList" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<foreach collection="ids" index="index" item="id" open="where id in (" close=")" separator=",">
			#{id}
		</foreach>
	</select>
	
	<select id="selectByIdArray" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<foreach collection="array" index="index" item="id" open="where id in (" close=")" separator=",">
			#{id}
		</foreach>
	</select>
	
	<select id="selectByKeyInMap" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<foreach collection="ids" index="index" item="id" open="where id in (" close=")" separator=",">
			#{id}
		</foreach>
	</select>
	
	<select id="selectByMap" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<!-- collection的值可谓map，或者为map.entrySet() -->
		<foreach collection="map" index="key" item="value" open="where id in (" close=")" separator=",">
			#{value}
		</foreach>
	</select>
	
	<insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
		insert into 
			sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
		values
		<foreach collection="list" index="index" item="user" separator=",">
			(#{user.userName}, #{user.userPassword}, #{user.userEmail}, #{user.userInfo}, 
			#{user.headImg, jdbcType=BLOB}, #{user.createTime, jdbcType=TIMESTAMP})
		</foreach>
	</insert>
	
	<update id="updateByMap" parameterType="java.util.Map">
		update sys_user
		set 
		<foreach collection="_parameter" index="key" item="value" separator=",">
			<!-- 这里的${key}在拼接出来的sql中不适用占位符 -->
			${key} = #{value}
		</foreach>
		where id = #{id}
	</update>
	
	<select id="selectByUserWithBind" resultType="SysUser">
		select 
			id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userinfo ,
			head_img headimg,
			create_time createTime
		from sys_user
		<where>
			1=1
			<if test = "userName != null and userName != '' ">
				<bind name="userNameLike" value=" '%' + userName + '%' "/>
				and user_name like #{userNameLike}
			</if>
			<if test = "userEmail != null and userEmail != '' ">
				<bind name="userEmailLike" value=" '%' + userEmail + '%' "/>
				and user_email = #{userEmailLike}
			</if>
		</where>
	</select>
	
	<select id="selectByIdWithStaticMethod" parameterType="Long" resultMap="userMap" >
		select * from sys_user 
		<where>
			<if test="@tk.mybatis.simple.util.StringUtil@print(id)">
				id = #{id}
			</if>
		</where> 
	</select>
	
	<select id="selectUserAndRoleById" resultType="SysUser" parameterType="Long">
		select
			u.id,
			u.user_name userName,
			u.user_password userPassword ,
			u.user_email userEmail,
			u.user_info userInfo,
			u.head_img headImg,
			u.create_time createTime,
			r.id "role.id",
			r.role_name "role.roleName",
			r.enabled "role.enabled",
			r.create_by "role.createBy",
			r.create_time "role.createTime"
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on ur.role_id = r.id
		where
			u.id = #{userId}
	</select>
	
	<select id="selectUserAndRoleById2" resultMap="userRoleMap" parameterType="Long">
		select
			u.id,
			u.user_name,
			u.user_password ,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id role_id,
			r.role_name role_name,
			r.enabled enabled,
			r.create_by create_by,
			r.create_time role_create_time
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on ur.role_id = r.id
		where
			u.id = #{userId}
	</select>
	
	<select id="selectUserAndRoleById3" resultMap="userRoleMap3" parameterType="Long">
		select
			u.id,
			u.user_name,
			u.user_password ,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on ur.role_id = r.id
		where
			u.id = #{userId}
	</select>
	
	<select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect" parameterType="Long">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			ur.role_id
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		where
			u.id = #{userId}
	</select>

	<select id="selectAllUserAndRoleList" resultMap="userRoleListMap2">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on r.id = ur.role_id
	</select>

	<select id="selectAllUserAndRoleListAndPrivilegeList" resultMap="userRoleListPrivilegeListMap">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from
			sys_user u
		inner join
			sys_user_role ur on u.id = ur.user_id
		inner join
			sys_role r on r.id = ur.role_id
		inner join
			sys_role_privilege rp on r.id = rp.role_id
		inner join
			sys_privilege p on p.id = rp.privilege_id
	</select>
	
	<select id="selectAllUserAndRoleListSelect" resultMap="userRoleListSelectMap">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time
		from
			sys_user u
	</select>
	
	<select id="selectUserByIdWithProcedure" statementType="CALLABLE" useCache="false">
		{call select_user_by_id(
			#{id, mode=IN, jdbcType = BIGINT},
			#{userName, mode=OUT, jdbcType = VARCHAR},
			#{userPassword, mode=OUT, jdbcType = VARCHAR},
			#{userEmail, mode=OUT, jdbcType = VARCHAR},
			#{userInfo, mode=OUT, jdbcType = VARCHAR},
			#{headImg, mode=OUT, jdbcType = BLOB, javaType=_byte[]},
			#{createTime, mode=OUT, jdbcType = TIMESTAMP}
		)}
	</select>
	
	<select id="selectUserPageWithProcedure" statementType="CALLABLE" useCache="false" resultMap="userMap">
		{call select_user_page(
			#{userName, mode=IN},
			#{offset, mode=IN},
			#{limit, mode=IN},
			#{total, mode=OUT, jdbcType=BIGINT}
		)}
	</select>
	
	<insert id="insertUserAndRolesWithProcedure" statementType="CALLABLE" >
		{call insert_user_and_roles(
			#{user.id, mode=OUT, jdbcType=BIGINT},
			#{user.userName, mode=IN},
			#{user.userPassword, mode=IN},
			#{user.userEmail, mode=IN},
			#{user.userInfo, mode=IN},
			#{user.headImg, mode=IN, jdbcType=BLOB},
			#{user.createTime , mode=OUT, jdbcType=TIMESTAMP},
			#{roleIds, mode=IN}
		)}
	</insert>
	
	<delete id="deleteUserByIdWithProcedure" statementType="CALLABLE">
		{call delete_user_by_id(#{id, mode=IN})}
	</delete>
</mapper>














